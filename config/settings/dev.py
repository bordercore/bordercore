"""Development settings and globals."""

from __future__ import absolute_import

import logging
import os

from .base import *

DEBUG = True

for t in TEMPLATES:
    t["OPTIONS"]["debug"] = True

INTERNAL_IPS = ("127.0.0.1", "10.3.2.2")

STATIC_URL = "/static/"

MIDDLEWARE += (
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "nplusone.ext.django.NPlusOneMiddleware"
)

INSTALLED_APPS += (
    "debug_toolbar",
    "django_extensions",
    "django_watchfiles",
    "notebook",
    "nplusone.ext.django",
    "template_timings_panel",
)

# Use a dummy cache for dev
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    }
}


DEBUG_TOOLBAR_PANELS = (
    "template_timings_panel.panels.TemplateTimings.TemplateTimings",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    "debug_toolbar.panels.logging.LoggingPanel",
    "debug_toolbar.panels.profiling.ProfilingPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
    "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.versions.VersionsPanel"
)


# Disable the debug toolbar if the environment variable
# "DISABLE_DEBUG_TOOLBAR" is set. Useful for selenium
# testing when you don't want it getting in the way.

def show_debug_toolbar(request):
    return not bool(int(os.getenv("DISABLE_DEBUG_TOOLBAR", 0)))

DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": "config.settings.dev.show_debug_toolbar",
}

NPLUSONE_LOGGER = logging.getLogger("nplusone")
NPLUSONE_LOG_LEVEL = logging.WARN


LOGGING["handlers"]["bordercore"] = {
    "level": "DEBUG",
    "class": "logging.StreamHandler",
    "formatter": "standard"
}

LOGGING["loggers"]["nplusone"] = {
    "handlers": ["bordercore"],
    "level": "WARN"
}

# Use the rich library to add color to logs
LOGGING["formatters"]["rich"] = {"datefmt": "[%X]"}

LOGGING["handlers"]["console"] = {
    "class": "rich.logging.RichHandler",
    "formatter": "rich",
    "level": "DEBUG",
}

LOGGING["loggers"]["django"] = {"handlers": ["console"]}

# Un-comment the following to log all SQL commands
#  generated by Django's ORM
#
# LOGGING["loggers"]["django.db.backends"] = {
#     "propagate": False,
#     "level": "DEBUG",
#     "handlers": ["bordercore"]
# }
